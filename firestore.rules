/**
 * @file Firebase Security Rules for Firestore.
 *
 * @Core Philosophy:
 * This ruleset enforces a role-based access control model with ownership for sales data.
 * Admins (defined by their presence in `/roles_admin/{uid}`) can manage products.
 * Sales agents can only manage sales data under their own user ID.
 *
 * @Data Structure:
 * - /products/{productId}: Product information, managed by admins.
 * - /users/{salesAgentId}: Sales agent profiles, where salesAgentId is the Firebase Auth UID.
 * - /users/{salesAgentId}/sales/{saleId}: Sales transactions owned by the sales agent.
 * - /roles_admin/{uid}: Collection to determine admin priviledges. If a user exists in this collection, they are an admin.
 *
 * @Key Security Decisions:
 * - Products are readable by all authenticated users, but only writable by admins.
 * - Sales agents can only create, update, and delete sales records under their own user ID.
 * - Listing all users is disallowed, but listing sales documents under a user is allowed for that user.
 * - Denormalization for Authorization:  Admin status is determined by presence in the `/roles_admin/{uid}` collection, which avoids requiring a get() call on the user document. Sales data is nested under `/users/{salesAgentId}` to enforce ownership via path matching.
 * - Data validation is relaxed to allow for rapid prototyping. Only authorization-critical fields are validated.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows admins to manage products. Readable by all authenticated users.
     * @path /products/{productId}
     * @allow (get, list): if isSignedIn()
     * @allow (create, update, delete): if isAdmin()
     * @deny (create, update, delete): if !isAdmin()
     * @principle Enforces role-based access control; admins manage products.
     */
    match /products/{productId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Allows sales agents to manage their profile information.
     * @path /users/{salesAgentId}
     * @allow (get, update, delete): if isOwner(salesAgentId)
     * @allow create: if isOwner(salesAgentId)
     * @deny list: if true;
     * @principle Enforces user-ownership; only the user can manage their profile.
     */
    match /users/{salesAgentId} {
      allow get, update, delete: if isOwner(salesAgentId);
      allow create: if isOwner(salesAgentId);
      allow list: if false;
    }

    /**
     * @description Allows sales agents to manage their sales records.
     * @path /users/{salesAgentId}/sales/{saleId}
     * @allow (get, list, create): if isOwner(salesAgentId)
     * @allow (update, delete): if isExistingOwner(salesAgentId)
     * @deny (create, update, delete): if !isOwner(salesAgentId)
     * @principle Enforces user-ownership via path matching; only the user can manage their sales records.
     */
    match /users/{salesAgentId}/sales/{saleId} {
      allow get, list, create: if isOwner(salesAgentId);
      allow update, delete: if isExistingOwner(salesAgentId);
    }

     /**
      * @description Determines if a user is an admin, granting them elevated privileges.
      * @path /roles_admin/{uid}
      * @allow get: if isAdmin();
      * @allow create: if isAdmin();
      * @allow update: if isAdmin();
      * @allow delete: if isAdmin();
      * @allow list: if isAdmin();
      * @principle Role-based access control; users in this collection are considered admins.
      */
    match /roles_admin/{uid} {
        allow get, create, update, delete, list: if isAdmin();
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }
  }
}